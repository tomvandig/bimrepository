// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace bimrepo
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CommitDiff : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static CommitDiff GetRootAsCommitDiff(ByteBuffer _bb) { return GetRootAsCommitDiff(_bb, new CommitDiff()); }
  public static CommitDiff GetRootAsCommitDiff(ByteBuffer _bb, CommitDiff obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CommitDiff __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bimrepo.Component? UpdatedComponents(int j) { int o = __p.__offset(4); return o != 0 ? (bimrepo.Component?)(new bimrepo.Component()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UpdatedComponentsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bimrepo.Schema? UpdatedSchemas(int j) { int o = __p.__offset(6); return o != 0 ? (bimrepo.Schema?)(new bimrepo.Schema()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UpdatedSchemasLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<bimrepo.CommitDiff> CreateCommitDiff(FlatBufferBuilder builder,
      VectorOffset updated_componentsOffset = default(VectorOffset),
      VectorOffset updated_schemasOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CommitDiff.AddUpdatedSchemas(builder, updated_schemasOffset);
    CommitDiff.AddUpdatedComponents(builder, updated_componentsOffset);
    return CommitDiff.EndCommitDiff(builder);
  }

  public static void StartCommitDiff(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUpdatedComponents(FlatBufferBuilder builder, VectorOffset updatedComponentsOffset) { builder.AddOffset(0, updatedComponentsOffset.Value, 0); }
  public static VectorOffset CreateUpdatedComponentsVector(FlatBufferBuilder builder, Offset<bimrepo.Component>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUpdatedComponentsVectorBlock(FlatBufferBuilder builder, Offset<bimrepo.Component>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUpdatedComponentsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<bimrepo.Component>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUpdatedComponentsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<bimrepo.Component>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUpdatedComponentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpdatedSchemas(FlatBufferBuilder builder, VectorOffset updatedSchemasOffset) { builder.AddOffset(1, updatedSchemasOffset.Value, 0); }
  public static VectorOffset CreateUpdatedSchemasVector(FlatBufferBuilder builder, Offset<bimrepo.Schema>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUpdatedSchemasVectorBlock(FlatBufferBuilder builder, Offset<bimrepo.Schema>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUpdatedSchemasVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<bimrepo.Schema>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUpdatedSchemasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<bimrepo.Schema>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUpdatedSchemasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<bimrepo.CommitDiff> EndCommitDiff(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<bimrepo.CommitDiff>(o);
  }
  public CommitDiffT UnPack() {
    var _o = new CommitDiffT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CommitDiffT _o) {
    _o.UpdatedComponents = new List<bimrepo.ComponentT>();
    for (var _j = 0; _j < this.UpdatedComponentsLength; ++_j) {_o.UpdatedComponents.Add(this.UpdatedComponents(_j).HasValue ? this.UpdatedComponents(_j).Value.UnPack() : null);}
    _o.UpdatedSchemas = new List<bimrepo.SchemaT>();
    for (var _j = 0; _j < this.UpdatedSchemasLength; ++_j) {_o.UpdatedSchemas.Add(this.UpdatedSchemas(_j).HasValue ? this.UpdatedSchemas(_j).Value.UnPack() : null);}
  }
  public static Offset<bimrepo.CommitDiff> Pack(FlatBufferBuilder builder, CommitDiffT _o) {
    if (_o == null) return default(Offset<bimrepo.CommitDiff>);
    var _updated_components = default(VectorOffset);
    if (_o.UpdatedComponents != null) {
      var __updated_components = new Offset<bimrepo.Component>[_o.UpdatedComponents.Count];
      for (var _j = 0; _j < __updated_components.Length; ++_j) { __updated_components[_j] = bimrepo.Component.Pack(builder, _o.UpdatedComponents[_j]); }
      _updated_components = CreateUpdatedComponentsVector(builder, __updated_components);
    }
    var _updated_schemas = default(VectorOffset);
    if (_o.UpdatedSchemas != null) {
      var __updated_schemas = new Offset<bimrepo.Schema>[_o.UpdatedSchemas.Count];
      for (var _j = 0; _j < __updated_schemas.Length; ++_j) { __updated_schemas[_j] = bimrepo.Schema.Pack(builder, _o.UpdatedSchemas[_j]); }
      _updated_schemas = CreateUpdatedSchemasVector(builder, __updated_schemas);
    }
    return CreateCommitDiff(
      builder,
      _updated_components,
      _updated_schemas);
  }
}

public class CommitDiffT
{
  public List<bimrepo.ComponentT> UpdatedComponents { get; set; }
  public List<bimrepo.SchemaT> UpdatedSchemas { get; set; }

  public CommitDiffT() {
    this.UpdatedComponents = null;
    this.UpdatedSchemas = null;
  }
}


static public class CommitDiffVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*UpdatedComponents*/, bimrepo.ComponentVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*UpdatedSchemas*/, bimrepo.SchemaVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
