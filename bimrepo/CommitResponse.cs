// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace bimrepo
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CommitResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static CommitResponse GetRootAsCommitResponse(ByteBuffer _bb) { return GetRootAsCommitResponse(_bb, new CommitResponse()); }
  public static CommitResponse GetRootAsCommitResponse(ByteBuffer _bb, CommitResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyCommitResponse(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, CommitResponseVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CommitResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<bimrepo.CommitResponse> CreateCommitResponse(FlatBufferBuilder builder,
      int id = 0) {
    builder.StartTable(1);
    CommitResponse.AddId(builder, id);
    return CommitResponse.EndCommitResponse(builder);
  }

  public static void StartCommitResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static Offset<bimrepo.CommitResponse> EndCommitResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<bimrepo.CommitResponse>(o);
  }
  public static void FinishCommitResponseBuffer(FlatBufferBuilder builder, Offset<bimrepo.CommitResponse> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCommitResponseBuffer(FlatBufferBuilder builder, Offset<bimrepo.CommitResponse> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CommitResponseT UnPack() {
    var _o = new CommitResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CommitResponseT _o) {
    _o.Id = this.Id;
  }
  public static Offset<bimrepo.CommitResponse> Pack(FlatBufferBuilder builder, CommitResponseT _o) {
    if (_o == null) return default(Offset<bimrepo.CommitResponse>);
    return CreateCommitResponse(
      builder,
      _o.Id);
  }
}

public class CommitResponseT
{
  public int Id { get; set; }

  public CommitResponseT() {
    this.Id = 0;
  }
  public static CommitResponseT DeserializeFromBinary(byte[] fbBuffer) {
    return CommitResponse.GetRootAsCommitResponse(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CommitResponse.FinishCommitResponseBuffer(fbb, CommitResponse.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class CommitResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
