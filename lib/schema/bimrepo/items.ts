// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PropertyType } from '../bimrepo/property-type.js';


export class Items implements flatbuffers.IUnpackableObject<ItemsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Items {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsItems(bb:flatbuffers.ByteBuffer, obj?:Items):Items {
  return (obj || new Items()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsItems(bb:flatbuffers.ByteBuffer, obj?:Items):Items {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Items()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():PropertyType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PropertyType.Int8;
}

static startItems(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addType(builder:flatbuffers.Builder, type:PropertyType) {
  builder.addFieldInt8(0, type, PropertyType.Int8);
}

static endItems(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createItems(builder:flatbuffers.Builder, type:PropertyType):flatbuffers.Offset {
  Items.startItems(builder);
  Items.addType(builder, type);
  return Items.endItems(builder);
}

unpack(): ItemsT {
  return new ItemsT(
    this.type()
  );
}


unpackTo(_o: ItemsT): void {
  _o.type = this.type();
}
}

export class ItemsT implements flatbuffers.IGeneratedObject {
constructor(
  public type: PropertyType = PropertyType.Int8
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Items.createItems(builder,
    this.type
  );
}
}
