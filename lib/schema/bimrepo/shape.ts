// automatically generated by the FlatBuffers compiler, do not modify

import { property, propertyT } from '../bimrepo/property.js';


export class shape implements flatbuffers.IUnpackableObject<shapeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):shape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsshape(bb:flatbuffers.ByteBuffer, obj?:shape):shape {
  return (obj || new shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsshape(bb:flatbuffers.ByteBuffer, obj?:shape):shape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

properties(index: number, obj?:property):property|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new property()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

propertiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startshape(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addProperties(builder:flatbuffers.Builder, propertiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, propertiesOffset, 0);
}

static createPropertiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPropertiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endshape(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createshape(builder:flatbuffers.Builder, propertiesOffset:flatbuffers.Offset):flatbuffers.Offset {
  shape.startshape(builder);
  shape.addProperties(builder, propertiesOffset);
  return shape.endshape(builder);
}

unpack(): shapeT {
  return new shapeT(
    this.bb!.createObjList<property, propertyT>(this.properties.bind(this), this.propertiesLength())
  );
}


unpackTo(_o: shapeT): void {
  _o.properties = this.bb!.createObjList<property, propertyT>(this.properties.bind(this), this.propertiesLength());
}
}

export class shapeT implements flatbuffers.IGeneratedObject {
constructor(
  public properties: (propertyT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const properties = shape.createPropertiesVector(builder, builder.createObjectOffsetList(this.properties));

  return shape.createshape(builder,
    properties
  );
}
}
