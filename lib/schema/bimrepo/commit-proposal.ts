// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CommitDiff, CommitDiffT } from '../bimrepo/commit-diff.js';


export class CommitProposal implements flatbuffers.IUnpackableObject<CommitProposalT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CommitProposal {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCommitProposal(bb:flatbuffers.ByteBuffer, obj?:CommitProposal):CommitProposal {
  return (obj || new CommitProposal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCommitProposal(bb:flatbuffers.ByteBuffer, obj?:CommitProposal):CommitProposal {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CommitProposal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

author():string|null
author(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
author(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

diff(obj?:CommitDiff):CommitDiff|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CommitDiff()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startCommitProposal(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAuthor(builder:flatbuffers.Builder, authorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, authorOffset, 0);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addDiff(builder:flatbuffers.Builder, diffOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, diffOffset, 0);
}

static endCommitProposal(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCommitProposalBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedCommitProposalBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): CommitProposalT {
  return new CommitProposalT(
    this.author(),
    this.message(),
    (this.diff() !== null ? this.diff()!.unpack() : null)
  );
}


unpackTo(_o: CommitProposalT): void {
  _o.author = this.author();
  _o.message = this.message();
  _o.diff = (this.diff() !== null ? this.diff()!.unpack() : null);
}
}

export class CommitProposalT implements flatbuffers.IGeneratedObject {
constructor(
  public author: string|Uint8Array|null = null,
  public message: string|Uint8Array|null = null,
  public diff: CommitDiffT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const author = (this.author !== null ? builder.createString(this.author!) : 0);
  const message = (this.message !== null ? builder.createString(this.message!) : 0);
  const diff = (this.diff !== null ? this.diff!.pack(builder) : 0);

  CommitProposal.startCommitProposal(builder);
  CommitProposal.addAuthor(builder, author);
  CommitProposal.addMessage(builder, message);
  CommitProposal.addDiff(builder, diff);

  return CommitProposal.endCommitProposal(builder);
}
}
