// automatically generated by the FlatBuffers compiler, do not modify



export class CommitResponse implements flatbuffers.IUnpackableObject<CommitResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CommitResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCommitResponse(bb:flatbuffers.ByteBuffer, obj?:CommitResponse):CommitResponse {
  return (obj || new CommitResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCommitResponse(bb:flatbuffers.ByteBuffer, obj?:CommitResponse):CommitResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CommitResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startCommitResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static endCommitResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCommitResponseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedCommitResponseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createCommitResponse(builder:flatbuffers.Builder, id:number):flatbuffers.Offset {
  CommitResponse.startCommitResponse(builder);
  CommitResponse.addId(builder, id);
  return CommitResponse.endCommitResponse(builder);
}

unpack(): CommitResponseT {
  return new CommitResponseT(
    this.id()
  );
}


unpackTo(_o: CommitResponseT): void {
  _o.id = this.id();
}
}

export class CommitResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public id: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CommitResponse.createCommitResponse(builder,
    this.id
  );
}
}
