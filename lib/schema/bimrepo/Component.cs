// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace bimrepo
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Component : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Component GetRootAsComponent(ByteBuffer _bb) { return GetRootAsComponent(_bb, new Component()); }
  public static Component GetRootAsComponent(ByteBuffer _bb, Component obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyComponent(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ComponentVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Component __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bimrepo.ComponentIdentifier? Id { get { int o = __p.__offset(4); return o != 0 ? (bimrepo.ComponentIdentifier?)(new bimrepo.ComponentIdentifier()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bimrepo.ComponentData? Data(int j) { int o = __p.__offset(6); return o != 0 ? (bimrepo.ComponentData?)(new bimrepo.ComponentData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<bimrepo.Component> CreateComponent(FlatBufferBuilder builder,
      Offset<bimrepo.ComponentIdentifier> idOffset = default(Offset<bimrepo.ComponentIdentifier>),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Component.AddData(builder, dataOffset);
    Component.AddId(builder, idOffset);
    return Component.EndComponent(builder);
  }

  public static void StartComponent(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, Offset<bimrepo.ComponentIdentifier> idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<bimrepo.ComponentData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<bimrepo.ComponentData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<bimrepo.ComponentData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<bimrepo.ComponentData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<bimrepo.Component> EndComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<bimrepo.Component>(o);
  }
  public static void FinishComponentBuffer(FlatBufferBuilder builder, Offset<bimrepo.Component> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedComponentBuffer(FlatBufferBuilder builder, Offset<bimrepo.Component> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ComponentT UnPack() {
    var _o = new ComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ComponentT _o) {
    _o.Id = this.Id.HasValue ? this.Id.Value.UnPack() : null;
    _o.Data = new List<bimrepo.ComponentDataT>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j).HasValue ? this.Data(_j).Value.UnPack() : null);}
  }
  public static Offset<bimrepo.Component> Pack(FlatBufferBuilder builder, ComponentT _o) {
    if (_o == null) return default(Offset<bimrepo.Component>);
    var _id = _o.Id == null ? default(Offset<bimrepo.ComponentIdentifier>) : bimrepo.ComponentIdentifier.Pack(builder, _o.Id);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = new Offset<bimrepo.ComponentData>[_o.Data.Count];
      for (var _j = 0; _j < __data.Length; ++_j) { __data[_j] = bimrepo.ComponentData.Pack(builder, _o.Data[_j]); }
      _data = CreateDataVector(builder, __data);
    }
    return CreateComponent(
      builder,
      _id,
      _data);
  }
}

public class ComponentT
{
  public bimrepo.ComponentIdentifierT Id { get; set; }
  public List<bimrepo.ComponentDataT> Data { get; set; }

  public ComponentT() {
    this.Id = null;
    this.Data = null;
  }
  public static ComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return Component.GetRootAsComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Component.FinishComponentBuffer(fbb, Component.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ComponentVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Id*/, bimrepo.ComponentIdentifierVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Data*/, bimrepo.ComponentDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
