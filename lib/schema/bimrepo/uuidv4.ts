// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class uuidv4 implements flatbuffers.IUnpackableObject<uuidv4T> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):uuidv4 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

values(index: number):number|null {
    return this.bb!.readUint8(this.bb_pos + 0 + index);
}

static sizeOf():number {
  return 16;
}

static createuuidv4(builder:flatbuffers.Builder, values: number[]|null):flatbuffers.Offset {
  builder.prep(1, 16);

  for (let i = 15; i >= 0; --i) {
    builder.writeInt8((values?.[i] ?? 0));

  }

  return builder.offset();
}


unpack(): uuidv4T {
  return new uuidv4T(
    this.bb!.createScalarList<number>(this.values.bind(this), 16)
  );
}


unpackTo(_o: uuidv4T): void {
  _o.values = this.bb!.createScalarList<number>(this.values.bind(this), 16);
}
}

export class uuidv4T implements flatbuffers.IGeneratedObject {
constructor(
  public values: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return uuidv4.createuuidv4(builder,
    this.values
  );
}
}
