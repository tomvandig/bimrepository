// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace bimrepo
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ComponentIdentifier : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static ComponentIdentifier GetRootAsComponentIdentifier(ByteBuffer _bb) { return GetRootAsComponentIdentifier(_bb, new ComponentIdentifier()); }
  public static ComponentIdentifier GetRootAsComponentIdentifier(ByteBuffer _bb, ComponentIdentifier obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ComponentIdentifier __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bimrepo.uuidv4? Entity { get { int o = __p.__offset(4); return o != 0 ? (bimrepo.uuidv4?)(new bimrepo.uuidv4()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string TypeHash { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeHashBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeHashBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeHashArray() { return __p.__vector_as_array<byte>(6); }
  public ushort ComponentIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<bimrepo.ComponentIdentifier> CreateComponentIdentifier(FlatBufferBuilder builder,
      bimrepo.uuidv4T entity = null,
      StringOffset type_hashOffset = default(StringOffset),
      ushort component_index = 0) {
    builder.StartTable(3);
    ComponentIdentifier.AddTypeHash(builder, type_hashOffset);
    ComponentIdentifier.AddEntity(builder, bimrepo.uuidv4.Pack(builder, entity));
    ComponentIdentifier.AddComponentIndex(builder, component_index);
    return ComponentIdentifier.EndComponentIdentifier(builder);
  }

  public static void StartComponentIdentifier(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddEntity(FlatBufferBuilder builder, Offset<bimrepo.uuidv4> entityOffset) { builder.AddStruct(0, entityOffset.Value, 0); }
  public static void AddTypeHash(FlatBufferBuilder builder, StringOffset typeHashOffset) { builder.AddOffset(1, typeHashOffset.Value, 0); }
  public static void AddComponentIndex(FlatBufferBuilder builder, ushort componentIndex) { builder.AddUshort(2, componentIndex, 0); }
  public static Offset<bimrepo.ComponentIdentifier> EndComponentIdentifier(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<bimrepo.ComponentIdentifier>(o);
  }
  public ComponentIdentifierT UnPack() {
    var _o = new ComponentIdentifierT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ComponentIdentifierT _o) {
    _o.Entity = this.Entity.HasValue ? this.Entity.Value.UnPack() : null;
    _o.TypeHash = this.TypeHash;
    _o.ComponentIndex = this.ComponentIndex;
  }
  public static Offset<bimrepo.ComponentIdentifier> Pack(FlatBufferBuilder builder, ComponentIdentifierT _o) {
    if (_o == null) return default(Offset<bimrepo.ComponentIdentifier>);
    var _type_hash = _o.TypeHash == null ? default(StringOffset) : builder.CreateString(_o.TypeHash);
    return CreateComponentIdentifier(
      builder,
      _o.Entity,
      _type_hash,
      _o.ComponentIndex);
  }
}

public class ComponentIdentifierT
{
  public bimrepo.uuidv4T Entity { get; set; }
  public string TypeHash { get; set; }
  public ushort ComponentIndex { get; set; }

  public ComponentIdentifierT() {
    this.Entity = new bimrepo.uuidv4T();
    this.TypeHash = null;
    this.ComponentIndex = 0;
  }
}


static public class ComponentIdentifierVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Entity*/, 16 /*bimrepo.uuidv4*/, 1, false)
      && verifier.VerifyString(tablePos, 6 /*TypeHash*/, false)
      && verifier.VerifyField(tablePos, 8 /*ComponentIndex*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
