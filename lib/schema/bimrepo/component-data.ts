// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ComponentDataType } from '../bimrepo/component-data-type.js';
import { ComponentIdentifier, ComponentIdentifierT } from '../bimrepo/component-identifier.js';


export class ComponentData implements flatbuffers.IUnpackableObject<ComponentDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ComponentData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsComponentData(bb:flatbuffers.ByteBuffer, obj?:ComponentData):ComponentData {
  return (obj || new ComponentData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsComponentData(bb:flatbuffers.ByteBuffer, obj?:ComponentData):ComponentData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ComponentData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():ComponentDataType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ComponentDataType.Number;
}

arrayLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

num():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

str():string|null
str(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
str(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

boolean():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

ref(obj?:ComponentIdentifier):ComponentIdentifier|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ComponentIdentifier()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startComponentData(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addType(builder:flatbuffers.Builder, type:ComponentDataType) {
  builder.addFieldInt8(0, type, ComponentDataType.Number);
}

static addArrayLength(builder:flatbuffers.Builder, arrayLength:number) {
  builder.addFieldInt32(1, arrayLength, 0);
}

static addNum(builder:flatbuffers.Builder, num:number) {
  builder.addFieldInt32(2, num, 0);
}

static addStr(builder:flatbuffers.Builder, strOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, strOffset, 0);
}

static addBoolean(builder:flatbuffers.Builder, boolean:boolean) {
  builder.addFieldInt8(4, +boolean, +false);
}

static addRef(builder:flatbuffers.Builder, refOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, refOffset, 0);
}

static endComponentData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ComponentDataT {
  return new ComponentDataT(
    this.type(),
    this.arrayLength(),
    this.num(),
    this.str(),
    this.boolean(),
    (this.ref() !== null ? this.ref()!.unpack() : null)
  );
}


unpackTo(_o: ComponentDataT): void {
  _o.type = this.type();
  _o.arrayLength = this.arrayLength();
  _o.num = this.num();
  _o.str = this.str();
  _o.boolean = this.boolean();
  _o.ref = (this.ref() !== null ? this.ref()!.unpack() : null);
}
}

export class ComponentDataT implements flatbuffers.IGeneratedObject {
constructor(
  public type: ComponentDataType = ComponentDataType.Number,
  public arrayLength: number = 0,
  public num: number = 0,
  public str: string|Uint8Array|null = null,
  public boolean: boolean = false,
  public ref: ComponentIdentifierT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const str = (this.str !== null ? builder.createString(this.str!) : 0);
  const ref = (this.ref !== null ? this.ref!.pack(builder) : 0);

  ComponentData.startComponentData(builder);
  ComponentData.addType(builder, this.type);
  ComponentData.addArrayLength(builder, this.arrayLength);
  ComponentData.addNum(builder, this.num);
  ComponentData.addStr(builder, str);
  ComponentData.addBoolean(builder, this.boolean);
  ComponentData.addRef(builder, ref);

  return ComponentData.endComponentData(builder);
}
}
