// automatically generated by the FlatBuffers compiler, do not modify

import { Items, ItemsT } from '../bimrepo/items.js';
import { PropertyType } from '../bimrepo/property-type.js';


export class property implements flatbuffers.IUnpackableObject<propertyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):property {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsproperty(bb:flatbuffers.ByteBuffer, obj?:property):property {
  return (obj || new property()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsproperty(bb:flatbuffers.ByteBuffer, obj?:property):property {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new property()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():PropertyType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PropertyType.Int8;
}

items(obj?:Items):Items|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Items()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startproperty(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:PropertyType) {
  builder.addFieldInt8(1, type, PropertyType.Int8);
}

static addItems(builder:flatbuffers.Builder, itemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, itemsOffset, 0);
}

static endproperty(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): propertyT {
  return new propertyT(
    this.name(),
    this.type(),
    (this.items() !== null ? this.items()!.unpack() : null)
  );
}


unpackTo(_o: propertyT): void {
  _o.name = this.name();
  _o.type = this.type();
  _o.items = (this.items() !== null ? this.items()!.unpack() : null);
}
}

export class propertyT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public type: PropertyType = PropertyType.Int8,
  public items: ItemsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const items = (this.items !== null ? this.items!.pack(builder) : 0);

  property.startproperty(builder);
  property.addName(builder, name);
  property.addType(builder, this.type);
  property.addItems(builder, items);

  return property.endproperty(builder);
}
}
